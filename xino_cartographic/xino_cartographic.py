# -*- coding: utf-8 -*-
"""
/***************************************************************************
 XinoCartographic
                                 A QGIS plugin
 Este complemente nos ayuda a crear planos de impresion leyendo los datos desde un libro de excel
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-06-02
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Emmanuel Rodriguez Garcia
        email                : isc.emmanuel.itd@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""





datos=geo.read_file("E:/Compartida/predio.xlsx")
print(datos)

geom=[Point(v.X,v.Y) for k,v in datos.iterrows()]
vertices = geo.GeoDataFrame(data=[{"id":i} for i in range(len(geom))],geometry=geom,crs=4486)
vertices["x"]=vertices.geometry.x
vertices["y"]=vertices.geometry.y
poli = geo.GeoDataFrame(data=[{"id":1}],geometry=[Polygon(geom)],crs=4486)
poli["area"]=poli.geometry.area

temp = poli.minimum_bounding_circle().buffer(20).bounds
minx, miny, maxx, maxy = temp.iloc[0]
minx-=50
maxx+=50
rect = Polygon([(minx, miny), (maxx, miny), (maxx, maxy), (minx, maxy)])
print(rect)
marco = geo.GeoDataFrame(data=[{"id":1}],geometry=[rect],crs=4486)



try:
    os.mkdir("shapes")
except Exception as e:
    print(e)
poli.to_file("shapes/predio1.shp")
marco.to_file("shapes/marco1.shp")
vertices.to_file("shapes/vertices.shp")

proyecto=QgsProject.instance()
proyecto.addMapLayer(QgsVectorLayer("shapes/marco1.shp","marco"),True)
proyecto.addMapLayer(QgsVectorLayer("shapes/predio1.shp","predio1"),True)
proyecto.addMapLayer(QgsVectorLayer("shapes/vertices.shp","vertices"),True)



import os
import pandas as pan
import geopandas as geo
from shapely import Point,Polygon
from .resources import *
from .xino_cartographic_dialog import XinoCartographicDialog
import os.path

from qgis.core import QgsProject, QgsVectorLayer
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction


class XinoCartographic:
    def __init__(self, iface):
        self.iface = iface
        self.plugin_dir = os.path.dirname(__file__)
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'XinoCartographic_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)
        self.actions = []
        self.menu = self.tr(u'&Xino Cartographic')

        self.first_start = None

    def tr(self, message):
        return QCoreApplication.translate('XinoCartographic', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/xino_cartographic/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Crear Planos Entregables'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Xino Cartographic'),
                action)
            self.iface.removeToolBarIcon(action)


    def cargarDatos(self,excel):
        coords=pan.read_excel(excel,sheet_name="coords",header=0)
        datos=pan.read_excel(excel,sheet_name="datos",header=0)
        print(datos.keys())
        print(coords())

    def run(self):
        if self.first_start == True:
            self.first_start = False
            self.dlg = XinoCartographicDialog()

        self.dlg.show()
        result = self.dlg.exec_()
        if result:
            pass
